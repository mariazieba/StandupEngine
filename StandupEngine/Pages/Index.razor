@page "/"
@using StandupEngine.Services
@using StandupEngine.Components
@using System.Text.Json
@inject Engine _engine
@inject HttpClient _httpClient
@inject IJSRuntime JsRuntime

<div class="container">
    <div class="row">
        <CascadingValue Value="CurrentText">
            <DialogueJumbotron />
        </CascadingValue>
    </div>
    <div class="row">
        <ParticipantList OnGreetingSet="GreetingSetHandler" />
    </div>
    <div class="row">
        <div class="col"></div>
        <div class="col">
            <Button Class="nes-btn is-success" Clicked="@StartShuffling"><Icon Name="IconName.Lightbulb" Float=Float.Default></Icon>   Who will start today, Engine?</Button>
        </div>
        <div class="col"></div>
    </div>
    @if (ShowProgress)
    {
        <div class="row">
            <Progress Size="Size.Large">
                <ProgressBar Animated Color=Color.Primary Value=@CurrentProgress></ProgressBar>
            </Progress>
        </div>
    }
</div>
<footer class="footer mt-auto py-3 bg-light" id="footer">
    <div class="container">
        <p><span class="text-muted"><small>This is <a href="https://icanhazdadjoke.com/">Dad Jokes</a> Powered Standup Engine. Background is an <a href="https://www.flaticon.com/free-icons/alien" title="alien icons">Alien from Freepik</a>.</small></span></p>
        <p><a href="https://twitter.com/codingupnorth" target="_blank" rel="noopener noreferrer"><i class="nes-icon twitter is-medium"></i></a> <a href="https://github.com/mariazieba/StandupEngine" target="_blank" rel="noopener noreferrer"><i class="nes-icon github is-medium"></i></a></p>
    </div>
</footer>
@code {

    [CascadingParameter]
    public string CurrentText { get; set; }

    private bool ShowProgress { get; set; } = false;

    private int CurrentProgress { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string jsonPrompts = await _httpClient.GetStringAsync(@"assets\sentences.json");

        _engine.LoadPrompts(jsonPrompts);
    }

    private async Task StartShuffling()
    {
        CurrentText = await GetJoke();
        await Task.Delay(500);

        TriggerProgressBar();
        await FakeProgress();

        CurrentText = GetOrderText();
    }

    private async Task<string> GetJoke()
    {
        var result = await _engine.GetJokeAsync(false);
        StateHasChanged();
        return result;
    }

    private string GetOrderText()
    {
        var result = _engine.GetMeetingOrder();
        StateHasChanged();
        return result;
    }

    private void TriggerProgressBar()
    {
        ShowProgress = true;
        StateHasChanged();
    }

    private async Task FakeProgress()
    {
        for (int i = 0; i <= 100; i += 20)
        {
            CurrentProgress = i;
            StateHasChanged();
            await Task.Delay(1000);
        }

        ShowProgress = false;
        StateHasChanged();
        CurrentProgress = 0;
    }

    private void GreetingSetHandler(string participant)
    {
        CurrentText = _engine.GetSingleGreeting(participant);
        StateHasChanged();
    }
}
